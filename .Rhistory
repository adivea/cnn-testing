img_name
img_name
visible
visible <- as.vector(read_table("additionalvisible.txt", col_names = FALSE)) # visible among field mounds >NA> and other mounds (CSH, SH, etc.)
visible
visible <- read_table("additionalvisible.txt", col_names = FALSE) # visible among field mounds >NA> and other mounds (CSH, SH, etc.)
visible
visible[[X1]]
visible[X1]
visible[X1,]
visible[,X1]
visible[,1]
visible[,"X1"]
visible[,["X1"]]
visible[["X1"]]
visible <- visible[["X1"]]
visible
img_name[-poor]
poor <- c(2184,3128,3349,3449,3520, 3571, 3609, 3660, 3661, 3664,3711, 4009, 4067, 4077, 4088) # poor among the 139 VIS mounds
img_name[-poor]
img_name
img_name[-poor]
img_name%nin%poor
visible_b <- img_name[img_name%nin%poor]
visible_b
visible_a <- visible[["X1"]]  # vector of other visible mounds
visible <- read_table("additionalvisible.txt", col_names = FALSE) # visible among field mounds >NA> and other mounds (CSH, SH, etc.)
visible_a <- visible[["X1"]]  # vector of other visible mounds
visible_a
visibleID <- sort(c(visible_a, visible_b))
visibleID
for(i in visibleID){  # make sure random IDs exist in mndpoly and contain no 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/finaldstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
visibleID
for(i in visibleID){  # make sure random IDs exist in mndpoly and contain no 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/finalstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
length(visibleID)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(raster)
source("STAMPS_LoadLargeImg.R")
radius <- 75 #twice that is 150m per side of polygon
#radius <- 125 #twice that is 250m per side of polygon
mounds$northing <- st_coordinates(mounds)[,2]
mounds$easting <- st_coordinates(mounds)[,1]
# define the plot edges based upon the plot radius.
yPlus <- mounds$northing+radius
xPlus <- mounds$easting+radius
yMinus <- mounds$northing-radius
xMinus <- mounds$easting-radius
# calculate polygon coordinates for each plot centroid.
square <- cbind(xMinus,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,yMinus,  # SE corner
xMinus,yMinus, # SW corner
xMinus,yPlus)  # NW corner again - close polygon
# Extract the mound ID information
ID <- mounds$TRAP_Code
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names=ID))
polys_df
mnd_poly <- st_as_sf(polys_df)
mnd_poly
# Add attributes
mnd_poly <- mnd_poly %>%
left_join(mounddata, by = c("id"="MoundID"))
# Write to shapefile
st_write(mnd_poly, "output_data/moundpolys250.shp",driver = 'ESRI Shapefile', append=FALSE)
# Remove interim files
remove(polys,polys_df, square)
# Look at the polygons
mnd_poly2m <- mnd_poly %>%
filter(Height>=2)
plot(mnd_poly$geometry, main = "All mounds (black) and 2m+ mounds (red)");
plot(mnd_poly2m$geometry, col = "red", add = TRUE)
# Read in all remotely-sensed features
rs <- st_read("~/Desktop/TRAP_Oxbow/KAZ/RS_Points12.shp")
# Filter for the confirmed mounds and see breakdown of Type
rs %>%
filter(F_ACaus == "MND") %>% # we filter for actual mounds
group_by(F_Type) %>%
count()  # code VIS denotes 152 "visible on surface" mounds
# Look at the confirmed mounds labelled as 'visible on surface'
library(mapview)
rs %>%
filter(F_ACaus == "MND" & F_Type == "VIS") %>%  # try PCM (3) , NCM(19), CSH(15)
mapview()
mapview(rs, zcol = "F_Type",  map.types = c("Esri.WorldImagery", "Esri.WorldShadedRelief","OpenTopoMap"))
visible_mounds <- rs %>%
filter(F_ACaus == "MND" & F_Type == "VIS")
other_mounds <- rs %>%
filter(F_ACaus == "MND" & F_Type %in% c("CCM", "CSH", "CSL", "NCM", "PCM", "SH", "SM", "UN"))
field_mounds<- rs %>%
filter(F_ACaus == "MND" & F_Type %nin% c("VIS", "CCM", "CSH", "CSL", "NCM", "PCM", "SH", "SM", "UN"))
mapview(field_mounds)
mounds %>%
filter(Height>=3) %>%  # 185 are 2+ m high, 179 are 3+, 147 are 3.5+, 143 are 4+m
filter(TRAP_Code %in% visible_mounds$TRAP_code) %>%  #72 2.5 features, or 68 3m features, or 56 3.5 features caught
mapview()
visiblemounds3_5 <- mounds %>%
# 185 are 2+ m high, 179 are 3+, 147 are 3.5+, 143 are 4+m
filter(Height>=3.5) %>%
# 72 2.5 features, or 68 3m features, or 56 3.5 features caught
filter(TRAP_Code %in% visible_mounds$TRAP_code)
visiblemounds3_5$TRAP_Code
# Are mound points fully within the raster?
is.na(raster::extract(kaz[[1]],visible_mounds)) # visible on surface
is.na(raster::extract(kaz[[1]],other_mounds)) # some crop or soil mark visible
is.na(raster::extract(kaz[[1]],field_mounds)) # added on basis of survey
# If some are not, assign to a new vector and filter out
outside <- which(is.na(raster::extract(KAZcropped[[1]],visible_mounds)))
# View what's in and out of the raster extent
mapview(mnd_poly %>% filter(id %in% randomID)) + mapview(extent_adj)
# Check that rs-based point IDs exist among survey mound-generated stamp boundaries
randomID%in%mnd_poly$id # visible mounds
field_mounds$TRAP_code%in%mnd_poly$id
other_mounds$TRAP_code%in%mnd_poly$id
outside
# Need hi-res cropped raster?
KAZcropped <- brick("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/Kazcrop_adj.tif")
# Are mound points fully within the raster?
is.na(raster::extract(kaz[[1]],visible_mounds)) # visible on surface
is.na(raster::extract(kaz[[1]],other_mounds)) # some crop or soil mark visible
is.na(raster::extract(kaz[[1]],field_mounds)) # added on basis of survey
# If some are not, assign to a new vector and filter out
outside <- which(is.na(raster::extract(KAZcropped[[1]],visible_mounds)))
# View what's in and out of the raster extent
mapview(mnd_poly %>% filter(id %in% randomID)) + mapview(extent_adj)
# Check that rs-based point IDs exist among survey mound-generated stamp boundaries
randomID%in%mnd_poly$id # visible mounds
field_mounds$TRAP_code%in%mnd_poly$id
other_mounds$TRAP_code%in%mnd_poly$id
outside
visibleID
length(visibleID)
library(rgeos)
library(rgdal)
for(i in visibleID){  # make sure random IDs exist in mndpoly and contain no 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/finalstamps150/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
img_name
img_name
# write visible TRAP numbers to file
write.table(visibleID, "data/visibleID.txt", append = FALSE, sep = " ", dec = ".",
row.names = FALSE, col.names = FALSE)
# Get visible mound TRAP IDs
visibleID <- read_table("data/visibleID.txt", col_names = FALSE)
# Get visible mound TRAP IDs
visibleID <- readtext("data/visibleID.txt", col_names = FALSE)
# Get visible mound TRAP IDs
visibleID <- as.vector(read.table("data/visibleID.txt", col_names = FALSE))
# Get visible mound TRAP IDs
visibleID <- as.vector(read.table("data/visibleID.txt", col_names = TRUE))
# Get visible mound TRAP IDs
visibleID <- as.vector(read.table("data/visibleID.txt"))
visibleID
# Get visible mound TRAP IDs
visibleID <- scan("data/visibleID.txt")
visibleID
library(tidyverse)
library(sf)
library(raster)
kaz
cnn_df
cnnall_sp
View(kaz)
cnne_df <- read_csv("2021-10-25.predictions/results/east/east.csv")  # eastern half
# 15334 points (origins in the raster cells)
cnnw_df <- read_csv("2021-10-25.predictions/results/west/west.csv")  # western half
# 15334 points (origins in the raster cells)
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = 250, what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes
cnne_df
# Filter predictions to those that have 60+% likelihood of containing a mound
cnn60_sp <- cnn_df %>%
# filter(mound_probability > 0.59) %>%  #333 observations
filter(mound_probability < 0.40) %>% # checking if the probability is a not-mound-probability
st_as_sf(coords = c("x","y"), crs = 32635)
# Make a grid of 60%+ cells, 382 cells, 332 unique ones
cnn_grid60 <- st_make_grid(cnn60_sp, cellsize = 250, what = "polygons")
# Re-add probability data to the 60%+ grid, as the gridmaking stripped the values out
cnn_grid60 <- st_join(st_sf(cnn_grid60), cnn60_sp)
# Visualize the grid cells with higher probability
ggplot(cnn_grid60) +
geom_sf(aes(color = mound_probability))
# Filter predictions to those that have 60+% likelihood of containing a mound
cnn60_sp <- cnn_df %>%
mutate(inv_mound_probability = 1-mound_probability) %>%
filter(inv_mound_probability > 0.59) %>% # checking if the probability is a not-mound-probability
# filter(mound_probability > 0.59) %>%  #333 observations
st_as_sf(coords = c("x","y"), crs = 32635)
# Make a grid of 60%+ cells, 382 cells, 332 unique ones
cnn_grid60 <- st_make_grid(cnn60_sp, cellsize = 250, what = "polygons")
# Re-add probability data to the 60%+ grid, as the gridmaking stripped the values out
cnn_grid60 <- st_join(st_sf(cnn_grid60), cnn60_sp)
# Visualize the grid cells with higher probability
ggplot(cnn_grid60) +
geom_sf(aes(color = mound_probability))
library(mapview)
mapview(cnn_grid60)
for (i in objects_needed){
if (exists(i)){
print(i)
}
objects_needed <- c("kaz", "cnn_df", "cnn_grid60", "mounds", "survey_ch", "survey", "survey_grids60")
script <- c("CNN_LoadData.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}
}
}
objects_needed <- c("kaz", "cnn_df", "cnn_grid60", "mounds", "survey_ch", "survey", "survey_grids60")
script <- c("CNN_LoadData.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}
}
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, cnn_grid60)# %>% distinct()
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predicted60$TRAP_Code,] # 627 not
# Inspect
head(predicted60,2)  #146 unique features among 166 features caught via intersecton
length(unique(predicted60$TRAP_Code)) # 146 unique mounds
length(unique(cnn_grid60$X1)) #332 unique cells in the entire grid
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(X1) %>%
count()
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(X1) %>%
count()
grids_n_mounds
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(unique(cnn_grid60$X1))," with 60% likelihood"))
# How many grids are the missing mounds in?
missing60 %>%
st_drop_geometry() %>%
group_by(X1) %>%
tally() %>% arrange(desc(n))
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnnall_grid) # 2158, clearly duplicates
# Check for duplicates
#?distinct()
length(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
missing60 <- missing60[!duplicated(missing60$TRAP_Code),] #620 undetected mounds
# How many grids are the missing mounds in?
missing60 %>%
st_drop_geometry() %>%
group_by(X1) %>%
tally() %>% arrange(desc(n))
# The missing 620 mounds are contained within 259 grid cells of the satellite image
# Let's see the distribution of missing mounds per grid cell
missing60 %>%
group_by(X1) %>%
count() %>%
ggplot()+ geom_histogram(aes(n))+ggtitle("Count of undetected mounds (620) per gridcell(n=259)") + theme_bw()
# some gridcells contain up to 28 undetected mounds. No surprise with the NW necropolis
# What is the mound_probability in these gridcells?
hist(missing60$mound_probability, main = "Probability of gridcells containing undetected mounds")
# See the predicted mounds over grids with 60% likelihood of mound plus unpredicted mounds
library(mapview)
mapview(unpredicted60, color = "orange", alpha= 0.5,
map.types = c("Esri.WorldImagery", "CartoDB.Positron"),
layer.name = "Undetected mounds")+
mapview(grids_n_mounds, zcol = "n", at = c(1, 2, 5, 10, 15, 30),
layer.name = "Detected mound no per gridcell")+
mapview(survey_grids60, layer.name = "Gridcells with 60%+ probability")
mapview(unpredicted60, color = "orange", alpha= 0.5,
map.types = c("Esri.WorldImagery", "CartoDB.Positron"),
layer.name = "Undetected mounds")+
mapview(grids_n_mounds, zcol = "n", at = c(1, 2, 5, 10, 15, 30),
layer.name = "Detected mound no per gridcell")
survey_grids60 <- st_intersection(survey_ch, cnn_grid60) # 192 grid cells with 60%+
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
# convex hull of survey polygons
survey_ch <- st_convex_hull(st_union(survey$geometry))
survey <- st_read("../1_Teaching/cds-spatial/data/KAZ_surveyarea.shp")
plot(survey$geometry, main = "Area covered by survey")
# convex hull of survey polygons
survey_ch <- st_convex_hull(st_union(survey$geometry))
# Bring in survey area to see overall coverage
survey <- st_read("../1_Teaching/cds-spatial-2022/data/KAZ_surveyarea.shp")
# Bring in survey area to see overall coverage
survey <- st_read("../1_Teaching/cds-spatial-2021/data/KAZ_surveyarea.shp")
plot(survey$geometry, main = "Area covered by survey")
# convex hull of survey polygons
survey_ch <- st_convex_hull(st_union(survey$geometry))
objects_needed <- c("kaz", "cnn_df", "cnn_grid60", "mounds", "survey_ch", "survey", "survey_grids60")
script <- c("CNN_LoadData2022.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
objects_needed <- c("kaz", "cnn_df", "cnn_grid60", "mounds", "survey_ch", "survey", "survey_grids60")
script <- c("CNN01_LoadData2022.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
objects_needed <- c("kaz", "cnn_df", "cnn_grid60", "mounds", "survey_ch", "survey", "survey_grids60")
script <- c("CNN01_LoadData2022.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability >0.799)
objects_needed <- c("kaz", "cnn_df", "cnn_grid60", "mounds", "survey_ch", "survey", "survey_grids60")
script <- c("CNN01_LoadData2022.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability >0.799)
ggplot(cnn_grid80) +
geom_sf(aes(color = mound_probability))
rm(c(far, farmounds))
rm(c(far, farmounds))
rm(far, farmounds)
plot(cnn_grid60["mound_probability"])
plot(cnn_grid80["mound_probability"])
# Plot the
plot(cnn_grid60["mound_probability"])
plot(cnn_grid80["mound_probability"])
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
#plot(survey_sm, border = "red", lwd = 2, add = TRUE);
#plot(survey$geometry, col = "lightyellow",border = "lightyellow", add = TRUE );
plot(mounds$geometry, add = TRUE, col = "hotpink");
#plot(cnn_grid80$geometry, add = TRUE, col = "white");
plot(cnn_grid60$geometry, add = TRUE, border = "white");
legend("bottom", legend = "Grid cells with 60% (white border) and 80% (white fill) probability of mounds overlayed on \nthe satellite image and survey study area outlines with mounds (pink circles)")
plotRGB(kaz, stretch= "lin")
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
#plot(survey_sm, border = "red", lwd = 2, add = TRUE);
#plot(survey$geometry, col = "lightyellow",border = "lightyellow", add = TRUE );
plot(mounds$geometry, add = TRUE, col = "hotpink");
#plot(cnn_grid80$geometry, add = TRUE, col = "white");
plot(cnn_grid60$geometry, add = TRUE, border = "white");
legend("bottom", legend = "Grid cells with 60% (white border) and 80% (white fill) probability of mounds overlayed on \nthe satellite image and survey study area outlines with mounds (pink circles)")
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
#plot(survey_sm, border = "red", lwd = 2, add = TRUE);
#plot(survey$geometry, col = "lightyellow",border = "lightyellow", add = TRUE );
plot(mounds$geometry, add = TRUE, col = "hotpink");
plot(cnn_grid80$geometry, add = TRUE, col = "white");
plot(cnn_grid60$geometry, add = TRUE, border = "white");
legend("bottom", legend = "Grid cells with 60% (white border) and 80% (white fill) probability of mounds overlayed on \nthe satellite image and survey study area outlines with mounds (pink circles)")
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, cnn_grid60)# %>% distinct()
# Which ones are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predicted60$TRAP_Code,] # 627 not predicted
# Inspect
head(predicted60,2)  #146 unique features among 166 features caught via intersecton
length(unique(predicted60$TRAP_Code)) # 146 unique mounds
length(unique(cnn_grid60$X1)) #332 unique cells in the entire grid
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(X1) %>%
count()
predicted60
# Inspect
head(predicted60,2)  #146 unique features among 166 features caught via intersecton
predicted60
unpredicted60
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predictedat60 <- st_intersection(mounds, cnn_grid60)# %>% distinct()
success60 <- st_intersection(cnn_grid60, mounds)
success60
plot(success60)
predictedat60
success60
cnn_grid60
success60 <- cnn_grid60 %>%
st_contains(mounds)
success60
cnn_grid60
success60 <- cnn_grid60 %>%
st_contains(mounds, sparse = FALSE)
success60
cnn_grid60
cnn_grid60 %>%
st_contains(st_set_precision(mounds, 1) )
which(lengths(st_contains(cnn_grid60m, mounds))>0)
which(lengths(st_contains(cnn_grid60, mounds))>0)
success60 <- cnn_grid %>%
filter(which(lengths(st_contains(cnn_grid60, mounds))>0))
success60 <- cnn_grid60 %>%
filter(which(lengths(st_contains(cnn_grid60, mounds))>0))
success60 <- cnn_grid60 %>%
slice(which(lengths(st_contains(cnn_grid60, mounds))>0))
success60
plot(success60)
predictedat60
print(predictedat60, "out of 773 mounds were predicted, producing a ", predicted60/773*100, "% success rate")
print(predictedat60, "out of 773 mounds were predicted, producing a", predicted60/773*100, "% success rate")
print(predictedat60, "out of 773 mounds were predicted, producing a", predictedat60/773*100, "% success rate")
paste0(predictedat60, "out of 773 mounds were predicted, producing a", predictedat60/773*100, "% success rate")
success60
predictedat60
# Inspect
head(predictedat60,2)  #146 unique features among 166 features caught via intersecton
length(unique(predictedat60$TRAP_Code)) # 146 unique mounds
length(unique(predictedat60$TRAP_Code))
length(unique(cnn_grid60$X1))
length(unique(cnn_grid60$`Image filename`))
grids_n_mounds <- predictedat60 %>%
#  st_drop_geometry() %>%
group_by(Image.filename) %>%
count()
grids_n_mounds
success60
length(unique(grids_n_mounds$X1)) # 50 grids within study area catch mounds
length(unique(grids_n_mounds$Image.filename)) # 50 grids within study area catch mounds
grids_n_mounds
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(unique(cnn_grid60$`Image filename`))," with 60% likelihood"))
