x <- cnn_df$coord_x
# define the plot edges based upon the plot radius.
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
# Extract the image ID information
ID <- cnn_df$`Image filename`
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names = ID,
mound_probability = 1 - cnn_df$`Raw Prediction`))
polys_df
cnnall_grid <- st_as_sf(polys_df)
# Write to shapefile
#st_write(cnnall_grid, "output_data/cnngrid_150.shp",driver = 'ESRI Shapefile', append=FALSE)
# Remove interim files
remove(polys,polys_df, square, x,y,xPlus,yPlus,side)
objects_needed <- c("kaz",           # aggregate satellite image
"cnn_df",        # dataframe of mound predictions for the image
"cnn60_pt",      # point file with predictions 60%+
"grid60",        # spatial grid from 60%+ predictions
"mounds",        # mound points documented in the survey area (773)
"survey_ch",     # survey area for verification reduced
"survey",        # survey area complete
"survey_grid60")# grids with 60+% mound likelihood in the survey area
script <- c("CNN01_LoadData2022.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
# 22 out of 773 mounds are found in 60%+ grid cells
predictedat60 <- st_intersection(mounds, grid60)
# Check in which gridcells the predicted mounds are located
success60 <- grid60 %>%
slice(which(lengths(st_contains(grid60, mounds))>0)) # %>% distinct()
#slice(which(lengths(st_intersects(grid60, mounds))>0))
length(unique(success60$id))
plot(success60$geometry, main = "60%+ p grids that actually contain mounds")
# Which mounds are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predictedat60$TRAP_Code,] # 706 not predicted
predictedat60
success60
unpredicted60
# total number of grids that intersect with known mounds
should_be_TP <- st_intersection(mounds, cnnall_grid)
should_be_TP %>% group_by(id) %>% count() %>% pull(n) %>% hist(main= "Frequency of mounds in should-be-TP tiles (n=399)")
should_be_TP %>%
pull(mound_probability) %>%
hist(main= "Probability of mound existence in should-be-TP tiles (n=399)")
mounds
mapview(should_be_TP)
hould_be_TP %>% group_by(id) %>% count()
should_be_TP %>% group_by(id) %>% count()
source("~/RStudio/cnn-testing/CNN01_LoadData2021.R")
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnnall_grid) # 2158, clearly duplicates
# Check for duplicates
#?distinct()
length(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
missing60 <- missing60[!duplicated(missing60$TRAP_Code),] #620 undetected mounds
missing60 <- st_intersection(unpredicted60, cnnall_grid)
missing60
predicted60
predictedat60
mounds
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_difference(predictedat60$geometry, mounds) # 2158, clearly duplicates
predictedat60
mounds
missing60 <- st_difference(predictedat60$geometry, mounds)
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_difference(mounds, predictedat60$geometry) # 2158, clearly duplicates
missing60
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_difference(mounds$geometry, predictedat60$geometry) # 2158, clearly duplicates
missing60
mounds$geometry
predictedat60$geometry
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- mounds %>%
filter(TRAP_Code%in%predictedat60$TRAP_Code) # 2158, clearly duplicates
missing60
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- mounds %>%
filter(-c(TRAP_Code%in%predictedat60$TRAP_Code)) # 2158, clearly duplicates
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- mounds %>%
filter(TRAP_Code%nin%predictedat60$TRAP_Code) # 2158, clearly duplicates
# Check for duplicates
length(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
length(duplicated(missing60$TRAP_Code))
duplicated(missing60$TRAP_Code)
# Check for duplicates
sum(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
unpredicted60
predicted60
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, grid60)# %>% distinct() # 38 predicted
predicted60
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predicted60$TRAP_Code,] # 735 not predicted
unpredicted60
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- mounds %>%
filter(TRAP_Code%nin%predicted60$TRAP_Code) # 752, clearly duplicates
missing60
# Check for duplicates
sum(duplicated(missing60$TRAP_Code)) # no duplicates
fp_tiles <- st_intersection(missing60, cnnall_grid)
fp_tiles
fp_tiles %>% group_by(id) %>% count()
# Tile success rates
all_tiles <- st_intersection(mounds, cnnall_grid) %>% group_by(id) %>% count()
all_tiles
source("~/RStudio/cnn-testing/CNN01_LoadData2021.R")
source("~/RStudio/cnn-testing/CNN01_LoadData2021.R")
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(150,150), what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes does not work as four points are at edges
mapview(cnnall_grid)+mapview(cnnall_sp)
mapview(cnnall_grid)#+mapview(cnnall_sp)
mapview(cnnall_grid)+mapview(mounds)
cnnall_grid_dd <- st_cast(st_union(cnnall_grid), "POLYGON")
mapview(cnnall_grid_dd)
mapview(cnnall_grid_dd) + mapview(cnnall_sp)
mapview(cnnall_sp)
cnnw_df
cnnw_df %>%
filter(...1 <112765)
# Filter west to not overlap with East
cnnw_df <- cnnw_df %>%
filter(...1 <112765)
# Combine the prediction data from E and W half into one dataset
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
names(cnn_df)[1] <- "Image filename"
hist(cnn_df$mound_probability, main = "Probability of a mound")
which(is.na(cnn_df$mound_probability))
# Look at the distribution of mound probability among the results
hist(cnn_df$mound_probability, main = "Probability of a mound")
source("~/RStudio/cnn-testing/CNN01_LoadData2021.R")
source("~/RStudio/cnn-testing/CNN01_LoadData2021.R")
mapview(cnnall_grid)+mapview(mounds)
library(tidyverse)
library(sf)
library(raster)
objects_needed <- c("kaz", "cnn_df", "grid60", "mounds", "survey_ch", "survey", "survey_grid60")
script <- c("CNN_LoadData2021.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
# Load the merged Satellite image for Kazanlak Valley, Bulgaria
# use cds-spatial repo from github https://github.com/CDS-AU-DK/cds-spatial-2022
kaz <-brick("../1_Teaching/cds-spatial-2022/data/Kaz.tif")
# Load the merged Satellite image for Kazanlak Valley, Bulgaria
# # use cds-spatial repo from github https://github.com/CDS-AU-DK/cds-spatial-2021
kaz <-brick("../1_Teaching/cds-spatial-2021/data/Kaz.tif")
objects_needed <- c("kaz", "cnn_df", "grid60", "mounds", "survey_ch", "survey", "survey_grid60")
script <- c("CNN_LoadData2021.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
objects_needed <- c("kaz", "cnn_df", "grid60", "mounds", "survey_ch", "survey", "survey_grid60")
script <- c("CNN_LoadData2021.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
# View all mounds
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
#plot(survey_sm, border = "red", lwd = 2, add = TRUE);
#plot(survey$geometry, col = "lightyellow",border = "lightyellow", add = TRUE );
plot(mounds$geometry, add = TRUE, col = "hotpink");
plot(grid80$geometry, add = TRUE, col = "white");
plot(grid60$geometry, add = TRUE, border = "white");
legend("bottom", legend = "Grid cells with 60% (white border) and 80% (white fill) probability of mounds overlayed on \nthe satellite image and survey study area outlines with mounds (pink circles)")
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, grid60)# %>% distinct() # 38 predicted
# Which ones are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predicted60$TRAP_Code,] # 735 not predicted
# Inspect
length(unique(predicted60$TRAP_Code)) # 38 unique mounds
length(grid60$id) # 295 cells with 60%p in the whole Kazanlak
length(survey_grid60) #151 cells with 60%p in survey area
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
length(unique(grids_n_mounds$id)) # 50 grids within study area catch mounds
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Number of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") per grid cell ( ",nrow(grids_n_mounds)," TP) \n among a total of ",length(survey_grid60)," grid cells in the study area with 60% likelihood"))
# Summary: 50 out of 332 Grid cells with 60%+ probability contain between 1 and 29 detected mounds, which makes sense for the necropolis of little 10m diameter mounds in the NW
# Add the information on prediction to mound dataset
library(tidyverse)
mounds <- mounds %>%
mutate(predicted60 =  case_when(TRAP_Code %in% predicted60$TRAP_Code ~ "yes",
TRAP_Code %nin% predicted60$TRAP_Code ~ "no"
))
# See the predicted mounds over grids with 60% likelihood of mound plus unpredicted mounds
library(mapview)
mapview(unpredicted60, color = "orange", alpha= 0.5,
map.types = c("Esri.WorldImagery", "CartoDB.Positron"),
layer.name = "Undetected mounds")+
mapview(grids_n_mounds, zcol = "n", at = c(1, 2, 5, 10, 15, 30),
layer.name = "Detected mound no per gridcell")+
mapview(survey_grid60, layer.name = "Gridcells with 60%+ probability")
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnnall_grid) # 2158, clearly duplicates
# Check for duplicates
#?distinct()
length(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
missing60 <- missing60[!duplicated(missing60$TRAP_Code),] #745 undetected mounds
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- mounds %>%
filter(TRAP_Code%nin%predicted60$TRAP_Code) # 752, clearly duplicates
# Inspect
length(unique(predicted60$TRAP_Code)) # 38 unique mounds
predicted60
unpredicted60
# Inspect
sum(unique(predicted60$TRAP_Code)) # 38 unique mounds
# Inspect
length(unique(predicted60$TRAP_Code)) # 38 unique mounds
length(grid60$id) # 295 cells with 60%p in the whole Kazanlak
length(survey_grid60) #151 cells with 60%p in survey area
cnne_df <- read_csv("data/2021-10-25_predictions/results/east/east.csv")  # eastern half
# 15334 points (origins in the raster cells)
cnnw_df <- read_csv("data/2021-10-25_predictions/results/west/west.csv")  # western half
# 15170 points (origins in the raster cells)
# Datasets have repeating numeric ID, add 100000 to differentiate West for later poly creation
cnnw_df[,1] <- cnnw_df[,1] +100000
# Combine the prediction data from E and W half into one dataset
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
mapview(cnnall_sp)
cnne_df <- read_csv("data/2021-10-25_predictions/results/east/east.csv")  # eastern half
# 15334 points (origins in the raster cells)
cnnw_df <- read_csv("data/2021-10-25_predictions/results/west/west.csv")  # western half
# 15170 points (origins in the raster cells)
# Datasets have repeating numeric ID, add 100000 to differentiate West for later poly creation
cnnw_df[,1] <- cnnw_df[,1] +100000
# Filter west to not overlap with East
# cnnw_df <- cnnw_df %>%
#   filter(...1 <112765)
# Combine the prediction data from E and W half into one dataset
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
names(cnn_df)[1] <- "Image filename"
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
mapview(cnnall_sp)
cnne_df
# Filter west to not overlap with East
cnne_df <- cnne_df %>%
filter(...1 <2432)
# Combine the prediction data from E and W half into one dataset
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
names(cnn_df)[1] <- "Image filename"
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
mapview(cnnall_sp)
# Filter west to not overlap with East
cnne_df <- cnne_df %>%
filter(...1 >2432)
# Combine the prediction data from E and W half into one dataset
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
names(cnn_df)[1] <- "Image filename"
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
mapview(cnnall_sp)
cnne_df
# Load prediction data as points (left bottom corner of the evaluated cell)
cnne_df <- read_csv("data/2021-10-25_predictions/results/east/east.csv")  # eastern half
cnne_df
cnne_df <- cnne_df %>%
filter(...1 > 2432)
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
names(cnn_df)[1] <- "Image filename"
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
mapview(cnnall_sp)
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(150,150), what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes does not work as four points are at edges
library(tidyverse)
library(sf)
library(raster)
objects_needed <- c("kaz", "cnn_df", "grid60", "mounds", "survey_ch", "survey", "survey_grid60")
script <- c("CNN_LoadData2021.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
# View all mounds
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
#plot(survey_sm, border = "red", lwd = 2, add = TRUE);
#plot(survey$geometry, col = "lightyellow",border = "lightyellow", add = TRUE );
plot(mounds$geometry, add = TRUE, col = "hotpink");
plot(grid80$geometry, add = TRUE, col = "white");
plot(grid60$geometry, add = TRUE, border = "white");
legend("bottom", legend = "Grid cells with 60% (white border) and 80% (white fill) probability of mounds overlayed on \nthe satellite image and survey study area outlines with mounds (pink circles)")
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, grid60)# %>% distinct() # 37 predicted
# Which ones are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predicted60$TRAP_Code,] # 736 not predicted
# Inspect
length(unique(predicted60$TRAP_Code)) # 37 unique mounds
length(grid60$id) # 270 cells with 60%p in the whole Kazanlak
length(survey_grid60) #134 cells with 60%p in survey area
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
length(unique(grids_n_mounds$id)) # 50 grids within study area catch mounds
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Number of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") per grid cell ( ",nrow(grids_n_mounds)," TP) \n among a total of ",length(survey_grid60)," grid cells in the study area with 60% likelihood"))
# Summary: 50 out of 332 Grid cells with 60%+ probability contain between 1 and 29 detected mounds, which makes sense for the necropolis of little 10m diameter mounds in the NW
# Add the information on prediction to mound dataset
library(tidyverse)
mounds <- mounds %>%
mutate(predicted60 =  case_when(TRAP_Code %in% predicted60$TRAP_Code ~ "yes",
TRAP_Code %nin% predicted60$TRAP_Code ~ "no"
))
predicted60
unpredicted60
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
length(grid60$id) # 270 cells with 60%p in the whole Kazanlak
length(survey_grid60) #134 cells with 60%p in survey area
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
grids_n_mounds
mapview(grids_n_mounds) + mapview(mounds)
mapview(grids_n_mounds)
predicted60
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
length(survey_grid60
)
18/134
116/134
grids_n_mounds
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
st_drop_geometry() %>%
group_by(id) %>%
count()
grids_n_mounds
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
st_drop_geometry() %>%
group_by(id) %>% tally(n)
grids_n_mounds
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
st_drop_geometry() %>%
group_by(id) %>%
count() %>%
tally(N)
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
st_drop_geometry() %>%
group_by(id) %>%
count() %>%
tally(n)
grids_n_mounds
# Inspect
length(unique(predicted60$TRAP_Code)) # 37 unique mounds
37-773
37/773
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#st_drop_geometry() %>%
group_by(id) %>%
count()
mapview(grids_n_mounds)
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Number of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") per grid cell ( ",nrow(grids_n_mounds)," TP) \n among a total of ",length(survey_grid60)," grid cells in the study area with 60% likelihood"))
# Add the information on prediction to mound dataset
library(tidyverse)
mounds <- mounds %>%
mutate(predicted60 =  case_when(TRAP_Code %in% predicted60$TRAP_Code ~ "yes",
TRAP_Code %nin% predicted60$TRAP_Code ~ "no"
))
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnnall_grid) # 2158, clearly duplicates
# Check for duplicates
#?distinct()
length(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
missing60 <- missing60[!duplicated(missing60$TRAP_Code),] #745 undetected mounds
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- mounds %>%
filter(TRAP_Code%nin%predicted60$TRAP_Code) # 752, clearly duplicates
mounds %>%
filter(TRAP_Code %nin% predicted60$TRAP_Code)
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- mounds %>%
dplyr::filter(TRAP_Code %nin% predicted60$TRAP_Code) # 752, clearly duplicates
predicted60$TRAP_Code
unpredicted60
# Check for duplicates
sum(duplicated(unpredicted60$TRAP_Code)) # no duplicates
# Tile success rates
all_tiles <- st_intersection(mounds, cnnall_grid) %>% group_by(id) %>% count()
cnnall_grid
fp_tiles <- st_intersection(unpredicted60, cnnall_grid)
fp_tiles
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes does not work as four points are at edges
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(150,150), what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes does not work as four points are at edges
mapview(cnnall_grid)
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp, join = st_contains) # add attributes does not work as four points are at edges
which(is.na(cnnall_grid$`Image filename.x`))
mapview(cnnall_grid, zcol = `Image filename.x`)
mapview(cnnall_grid, zcol = `Image filename.x`)
cnnall_grid
mapview(cnnall_grid, zcol = `Image filename.x`)
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("x","y"), crs = 32635)
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(150,150), what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp, join = st_contains) # add attributes does not work as four points are at edges
mapview(cnnall_grid, zcol = `Image filename.x`)
mapview(cnnall_grid, zcol = `Image filename`)
mapview(cnnall_grid, zcol = "Image filename")
mapview(cnnall_grid, col = "Image filename")
mapview(cnnall_grid, col = "mound_probability")
mapview(cnnall_grid, zcol = "mound_probability")
mapview(cnnall_sp, zcol = "mound_probability")
which(is.na(cnnall_grid$`Image filename`))
