is.na(raster::extract(kaz[[1]],visible_mounds)))
outside <- which(is.na(raster::extract(KAZcropped[[1]],visible_mounds)))
kaz[[1]]
is.na(raster::extract(kaz[[1]],visible_mounds))
is.na(raster::extract(KAZcropped[[1]],visible_mounds))
mapview(visible_mounds) + mapview(extent_adj)
# Writing the cropped-to-mound rasters to E:SharedGIS....Cormac on silver Seagate
#setwd("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac")
# writeRaster(KAZEcropped, file="KazEcropped.tif", format="GTiff")
# writeRaster(KAZWcropped, file="KazWcropped.tif", format="GTiff")
# writeRaster(KAZcropped, file="E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/Kazcropped.tif", format="GTiff")
writeRaster(KAZcropped, file="E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/Kazcrop_adj.tif", format="GTiff")
randomID <- visible_mounds$TRAP_Code  # 152 features
# Create a directory for stamps
dir.create("stamps_low_res")
# Loop to check for polygon and raster overlap and to generate stamps
library(rgeos)
for (i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
filename= paste0("morestamps/",i,".tif"),
# filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/stamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
for(i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/stamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
randomID
# If large raster is not in memory
# setwd("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac")
# KAZcropped <- brick("Kazcropped.tif")
# Alternatively if a rebuild is needed, run
#source("MOSAIC.R")
randomID <- visible_mounds$TRAP_code
randomID
visible_mounds$TRAP_code["TRAP_code">0]
# If large raster is not in memory
# setwd("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac")
# KAZcropped <- brick("Kazcropped.tif")
# Alternatively if a rebuild is needed, run
#source("MOSAIC.R")
randomID <- visible_mounds$TRAP_code[TRAP_code>0]
visible_mounds$TRAP_code[visible_mounds$TRAP_code>0]
# If large raster is not in memory
# setwd("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac")
# KAZcropped <- brick("Kazcropped.tif")
# Alternatively if a rebuild is needed, run
#source("MOSAIC.R")
randomID <- visible_mounds$TRAP_code[visible_mounds$TRAP_code>0]
randomID
for(i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/morestamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
mapview(mnd_poly) + mapview(extent_adj)
mapview(mnd_poly[mnd_poly$id%in%randomID]) + mapview(extent_adj)
mnd_poly[mnd_poly$id%in%randomID
mnd_poly[mnd_poly$id%in%randomID]
mnd_poly$id
randomID
mnd_poly[mnd_poly$id %in% randomID]
mnd_poly
mapview(mnd_poly %>% filter(id %in% randomID)) + mapview(extent_adj)
kaz
randomID%in%mnd_poly$id
mnd_poly$id <1000
which(mnd_poly$id<1000)
which(mnd_poly$id>4000)
which(mnd_poly$id>5100)
randomID<1000
which(randomID<1000)
'%nin%' <- negate '%in%'
'%nin%' <- Negate('%in%')
which(randomID %nin% mnd_poly$id)
trapnomissing <- which(randomID %nin% mnd_poly$id)
# Eliminate the zeroes from randomID
randomID <- randomID[-trapnomissing]
randomID
for(i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/morestamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
plotRGB(new_clip)
# Filter for the confirmed mounds and see breakdown of Type
rs %>%
filter(F_ACaus == "MND") %>% # we filter for actual mounds
group_by(F_Type) %>%
count()  # code VIS denotes 152 "visible on surface" mounds
mapview(rs, zcol = "F_Type",  map.types = c("Esri.WorldImagery", "Esri.WorldShadedRelief","OpenTopoMap"))
# Filter for the confirmed mounds and see breakdown of Type
rs %>%
filter(F_ACaus == "MND") %>% # we filter for actual mounds
group_by(F_Type) %>%
count()  # code VIS denotes 152 "visible on surface" mounds
mapview(rs, zcol = "F_Type",  map.types = c("Esri.WorldImagery", "Esri.WorldShadedRelief","OpenTopoMap"))
other_mounds <- rs %>%
filter(F_ACaus == "MND" & F_Type %in% c("CCM", "CSH", "CSL", "NCM", "PCM", "SH", "SM", "UN"))
other_mounds
rs %>%
filter(F_ACaus == "MND" & F_Type== "NA")
# Filter for the confirmed mounds and see breakdown of Type
rs %>%
filter(F_ACaus == "MND") %>% # we filter for actual mounds
group_by(F_Type) %>%
count()  # code VIS denotes 152 "visible on surface" mounds
field_mounds<- rs %>%
filter(F_ACaus == "MND" & F_Type== "<NA>")
rs %>%
filter(F_ACaus == "MND" & F_Type== "<NA>")
rs %>%
filter(F_ACaus == "MND" & F_Type== "")
rs %>%
filter(F_ACaus == "MND" & F_Type %nin% c("VIS", "CCM", "CSH", "CSL", "NCM", "PCM", "SH", "SM", "UN"))
field_mounds<- rs %>%
filter(F_ACaus == "MND" & F_Type %nin% c("VIS", "CCM", "CSH", "CSL", "NCM", "PCM", "SH", "SM", "UN"))
mapview(field_mounds)
is.na(raster::extract(kaz[[1]],field_mounds))
is.na(raster::extract(kaz[[1]],other_mounds))
field_mounds$TRAP_code%in%mnd_poly$id
other_mounds$TRAP_code%in%mnd_poly$id
randomID <- other_mounds$TRAP_code
trapnomissing <- which(randomID %nin% mnd_poly$id) # 10 numbers are missing
trapnomissing
# Eliminate the zeroes from randomID
randomID <- randomID[-trapnomissing]  # 139 good numbers
for(i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/morestamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
library(rgeos)
for(i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/morestamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
randomID
randomID <- other_mounds$TRAP_code
randomID
randomID %nin% mnd_poly$id
trapnomissing <- which(randomID %nin% mnd_poly$id) # 10 numbers are missing
trapnomissing
# Eliminate the zeroes from randomID
randomID <- randomID[-trapnomissing]  # 139 good numbers
randomID
randomID <- other_mounds$TRAP_code
randomID[-trapnomissing]
for(i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/morestamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
duplicated(randomID)
randomID <- field_mounds$TRAP_code
trapnomissing <- which(randomID %nin% mnd_poly$id) # 10 numbers are missing
trapnomissing
# Eliminate the zeroes from randomID
randomID <- randomID[-trapnomissing]  # 139 good numbers
duplicated(randomID)
is.na(raster::extract(kaz[[1]],field_mounds))
# Eliminate the zeroes from randomID
randomID <- randomID[-trapnomissing]  # 139 good numbers
duplicated(randomID)
randomID
length(randomID)
duplicated(randomID)
mapview(mounds %>% filter(TRAP_Code%in%trapnomissing))
mapview(rs %>% filter(TRAP_Code%in%trapnomissing))
mapview(rs %>% filter(TRAP_code%in%trapnomissing))
field_mounds$TRAP_code%in%mnd_poly$id
rs %>% filter(TRAP_code=trapnomissing)
rs %>% filter(TRAP_code==trapnomissing)
rs %>% filter(TRAP_code%in%trapnomissing)
trapnomissing
rs %>% filter(TRAP_code%in%randomID[trapnomissing])
mapview(rs %>% filter(TRAP_code%in%randomID[trapnomissing]))
# View what's in and out of the raster extent
mapview(mnd_poly %>% filter(id %in% randomID)) + mapview(extent_adj)
mapview(rs %>% filter(TRAP_code%in%randomID[trapnomissing]), map.types = c("Esri.WorldImagery", "Esri.WorldShadedRelief","OpenTopoMap"))
for(i in randomID){
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/",i,".tif"),
format = "GTiff", overwrite =TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
visible_mounds$TRAP_Code
visible_mounds$TRAP_code
visible_mounds$TRAP_code%in%other_mounds$TRAP_code
visible_mounds$TRAP_code%in%field_mounds$TRAP_code
other_mounds$TRAP_code%in%field_mounds$TRAP_code
randomID <- field_mounds$TRAP_code
duplicated(randomID)
randomID
randomID[randomID==0]
randomID[-(randomID==0)]
randomID %>% filter(randomID!=0)
randomID %>% dplyr::filter(randomID!=0)
randomID[randomID!=0]
list.files("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/", pattern = "*.tif")
list.files("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/", pattern = ".tif")
list.files("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/", pattern = ".tif", full.names = FALSE)
basename(list.files("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/", pattern = ".tif"))
img_name <- basename(list.files("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/", pattern = ".tif"))
img_name <- str_remove(img_name, pattern = ".tif")
img_name
img_name <- as.integer(str_remove(img_name, pattern = ".tif"))
img_name
for(i in randomID[randomID!=0]){  # eliminate 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
randomID[randomID!=0]
help(writeRaster)
# Loop to check for polygon and raster overlap and to generate stamps
library(rgeos)
library(rgdal)
for(i in randomID[randomID!=0]){  # eliminate 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
randomID <- field_mounds$TRAP_code
randomID
duplicated(randomID)
which(duplicated(randomID))
randomID[77]
randomID <- randomID[randomID!=0]
randomID
which(duplicated(randomID)) # in field mounds, there are two 0
randomID <- randomID[randomID!=0]
mapview(rs %>% filter(TRAP_code%in%randomID[trapnomissing]), map.types = c("Esri.WorldImagery", "Esri.WorldShadedRelief","OpenTopoMap"))
which(randomID %nin% mnd_poly$id)
trapnomissing <- which(randomID %nin% mnd_poly$id) # 10 numbers are missing
# Eliminate the zeroes from randomID
randomID <- randomID[-trapnomissing]  # 139 good numbers
randomID
for(i in randomID){  # make sure random IDs exist in mndpoly and contain no 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
img_name <- basename(list.files("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/", pattern = ".tif"))
img_name
img_name <- as.integer(str_remove(img_name, pattern = ".tif"))
img_name
randomID[-img_name]
randomID[-img_name]
img_name
img_name
randomID
img_name
randomID%in%img_name
randomID[-randomID%in%img_name]
randomID %>% filter(randomID%nin%img_name)
randomID[randomID%nin%img_name]
for(i in randomID[randomID%nin%img_name]){  # make sure random IDs exist in mndpoly and contain no 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/fieldstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
# Filter for the confirmed mounds and see breakdown of Type
rs %>%
filter(F_ACaus == "MND") %>% # we filter for actual mounds
group_by(F_Type) %>%
count()  # code VIS denotes 152 "visible on surface" mounds
img_name <- basename(list.files("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/139stamps/", pattern = ".tif"))
img_name <- as.integer(str_remove(img_name, pattern = ".tif"))
img_name
visible <- read_table("additionalvisible.txt")
visible <- read_table("additionalvisible.txt", header = FALSE)
visible <- read_table("additionalvisible.txt",col_names = FALSE)
img_name
img_name
visible
visible <- as.vector(read_table("additionalvisible.txt", col_names = FALSE)) # visible among field mounds >NA> and other mounds (CSH, SH, etc.)
visible
visible <- read_table("additionalvisible.txt", col_names = FALSE) # visible among field mounds >NA> and other mounds (CSH, SH, etc.)
visible
visible[[X1]]
visible[X1]
visible[X1,]
visible[,X1]
visible[,1]
visible[,"X1"]
visible[,["X1"]]
visible[["X1"]]
visible <- visible[["X1"]]
visible
img_name[-poor]
poor <- c(2184,3128,3349,3449,3520, 3571, 3609, 3660, 3661, 3664,3711, 4009, 4067, 4077, 4088) # poor among the 139 VIS mounds
img_name[-poor]
img_name
img_name[-poor]
img_name%nin%poor
visible_b <- img_name[img_name%nin%poor]
visible_b
visible_a <- visible[["X1"]]  # vector of other visible mounds
visible <- read_table("additionalvisible.txt", col_names = FALSE) # visible among field mounds >NA> and other mounds (CSH, SH, etc.)
visible_a <- visible[["X1"]]  # vector of other visible mounds
visible_a
visibleID <- sort(c(visible_a, visible_b))
visibleID
for(i in visibleID){  # make sure random IDs exist in mndpoly and contain no 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/finaldstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
visibleID
for(i in visibleID){  # make sure random IDs exist in mndpoly and contain no 0 trap codes
lapply(poly, function(raster) {
poly <- as(mnd_poly[mnd_poly$id ==i,], "Spatial")    # convert polygon to 'Spatial' format
ei <- as(extent(KAZcropped), "SpatialPolygons")             # create an extent of sat img as 'Spatial' format
if (gContainsProperly(ei,poly)) {
paste0("Polygon for ", i," is fully within raster")
new_clip <- crop(KAZcropped, mnd_poly[mnd_poly$id ==i,])  # create the cutout
#plotRGB(new_clip)
writeRaster(new_clip,
# filename= paste0("morestamps/",i,".tif"),
filename= paste0("E:/TRAP Workstation/Shared GIS/Satellite imagery/IKONOS/Kazanlak/ERDAS/Cormac/finalstamps/",i,".tif"),
format = "GTiff", overwrite = TRUE)
} else if (gIntersects(ei,poly)) {
paste0(i," intersects")
} else {
paste0(i," is fully outside the raster")
}
})
}
length(visibleID)
