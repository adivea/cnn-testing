# Check the height difference between un- and predicted mounds
boxplot(Height~predictedat60, data = mounds, xlab = "Was this mound detected with CNN?")
# Is there a significant relationship between the Height of a mound and its detection?
t.test(Height ~ as.factor(predictedat60), data = mounds)
str(t.test(Height ~ as.factor(predictedat60), data = mounds))
# ... the answer seems to be yes with p at 3.14e-05
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021Inverted.R")
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021Inverted.R")
# Look at the distribution of the 'corrected' predictions
hist(1-cnn_df$`Raw Prediction`, main = "Probability of a mound")
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021Inverted.R")
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021Inverted.R")
library(tidyverse)
# Load prediction data as points (left bottom corner of the evaluated cell)
cnne_df <- read_csv("2021-10-25_predictions/results/east/east.csv")  # eastern half
# 15334 points (origins in the raster cells)
cnnw_df <- read_csv("2021-10-25_predictions/results/west/west.csv")  # western half
# Combine the prediction data from E and W half into one dataset
cnn_df <- rbind(cnne_df, cnnw_df)     # # 30504 rows, combined east and west (overlap!)
cnn_df
names(cnn_df[,1])
names(cnn_df[,1]) <- `Image filename`
names(cnn_df[,1]) <- "Image filename"
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021Inverted.R")
names(cnn_df[,1]) <- "Image filename"
names(cnn_df)[,1] <- "Image filename"
names(cnn_df)[1] <- "Image filename"
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021Inverted.R")
# 15170 points (origins in the raster cells)
cnnw_df[,1]
cnnw_df[,1] +100000
cnnw_df[,1]
# 15170 points (origins in the raster cells)
cnnw_df[,1] <- cnnw_df[,1] +100000
cnnw_df[,1]
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021Inverted.R")
library(mapview)
mapview(grid60)+mapview(cnn60_pt)
side <- 150 #twice that is 150m per side of polygon
y <- cnn80_df$y
x <- cnn80_df$x
# define the plot edges based upon the plot radius.
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
# Extract the image ID information
ID <- cnn80_df$`Image filename`
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names = ID,
mound_probability = cnn80_df$mound_probability))
polys_df
grid80 <- st_as_sf(polys_df)
# Write to shapefile
# st_write(grid60, "output_data/grid60_150.shp",driver = 'ESRI Shapefile', append=FALSE)
# Clean up interim files
remove(polys,polys_df, square, x,y,xPlus,yPlus,side)
# Look at the polygons
mapview(grid80)+mapview(cnn80_pt)
# Bring in survey area to see overall coverage
survey <- st_read("../1_Teaching/cds-spatial-2021/data/KAZ_surveyarea.shp")
plot(survey$geometry, main = "Area covered by survey")
# convex hull of survey polygons
survey_ch <- st_convex_hull(st_union(survey$geometry))
# # Extrapolate rough study area after subtracting outliers
# far <- mounds %>%
#   st_is_within_distance(survey, 1500) %>%
#   lengths>0
# farmounds <- which(far==0)  # these are the mounds that are mostly far from survey area
#
# # convex hull of points without outliers
# survey_sm <- st_convex_hull(st_union(mounds$geometry[-farmounds]))
################################    GET MOUND DATA
# Bring in all the mounds
mounds <- st_read("../1_Teaching/cds-spatial-2022/data/KAZ_mounds.shp")
mounddata <- read_csv("../1_Teaching/cds-spatial-2022/data/KAZ_mdata.csv")
# filter the noticeable ones (2+ meters)
mounds <- mounds %>%
left_join(mounddata, by = c("TRAP_Code"="MoundID"))
# ok, a number of mounds are outside the grids,
# with most surprising absentee being the east-most peninsula
##################################### INTERSECT WITH STUDY AREA
### Crop 60%+ and 80% cell grid to TRAP study area
# Let's see which of the grid cells with high probability of containing a mound are in the TRAP study area?
survey_grids60 <- st_intersection(survey_ch, cnn_grid60) # 192 grid cells with 60%+
survey_grids80 <- st_intersection(survey_ch, cnn_grid80) # 40 grid cells with 80%+
survey_grid60 <- st_intersection(survey_ch, grid60) # 192 grid cells with 60%+
survey_grid80 <- st_intersection(survey_ch, grid80) # 40 grid cells with 80%+
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021.R")
objects_needed <- c("kaz", "cnn_df", "cnn_grid60", "mounds", "survey_ch", "survey", "survey_grids60")
script <- c("CNN_LoadData.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
objects_needed <- c("kaz", "cnn_df", "grid60", "mounds", "survey_ch", "survey", "survey_grid60")
script <- c("CNN_LoadData2021.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
# View all mounds
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
plot(survey_sm, border = "red", lwd = 2, add = TRUE);
# View all mounds
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
#plot(survey_sm, border = "red", lwd = 2, add = TRUE);
#plot(survey$geometry, col = "lightyellow",border = "lightyellow", add = TRUE );
plot(mounds$geometry, add = TRUE, col = "hotpink");
plot(cnn_grid80$geometry, add = TRUE, col = "white");
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, grid60)# %>% distinct()
# Which ones are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predicted60$TRAP_Code,] # 627 not predicted
# Inspect
head(predicted60,2)  #146 unique features among 166 features caught via intersecton
length(unique(predicted60$TRAP_Code)) # 146 unique mounds
length(unique(grid60$X1)) #332 unique cells in the entire grid
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(X1) %>%
count()
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, grid60)# %>% distinct()
# Which ones are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predicted60$TRAP_Code,] # 627 not predicted
# Inspect
head(predicted60,2)  #146 unique features among 166 features caught via intersecton
length(unique(predicted60$TRAP_Code)) # 146 unique mounds
length(unique(grid60$id)) #332 unique cells in the entire grid
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
length(unique(grids_n_mounds$id)) # 50 grids within study area catch mounds
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(unique(grid60$X1))," with 60% likelihood"))
# Summary: 50 out of 332 Grid cells with 60%+ probability contain between 1 and 29 detected mounds, which makes sense for the necropolis of little 10m diameter mounds in the NW
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(unique(grid60$id))," with 60% likelihood"))
length(unique(predicted60$TRAP_Code)) # 146 unique mounds
# Inspect
head(predicted60,2)  #146 unique features among 166 features caught via intersecton
# Inspect
length(unique(predicted60$TRAP_Code)) # 146 unique mounds
length(unique(grid60$id)) #332 unique cells in the entire grid
length(grid60$id) #332 unique cells in the entire grid
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, survey_grid60)# %>% distinct() # 38 predicted
length(grid60$id)
length(survey_grid60$id) #295 cells with 60%p in survey area
length(survey_grid60$id) #295 cells with 60%p in survey area
length(survey_grid60) #295 cells with 60%p in survey area
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted60 <- st_intersection(mounds, grid60)# %>% distinct() # 38 predicted
# How many gridcells with 60% probability actually contain mounds?
grids_n_mounds <- predicted60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
length(unique(grids_n_mounds$id)) # 50 grids within study area catch mounds
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(unique(grid60$id))," with 60% likelihood"))
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(survey_grid60)," with 60% likelihood"))
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Number of predicted mounds (n = ",length(unique(predicted60$TRAP_Code)), ") per grid cell ( ",nrow(grids_n_mounds)," TP) \n among a total of ",length(survey_grid60)," grid cells in the study area with 60% likelihood"))
nrow(grids_n_mounds)/length(unique(grid60$id))
nrow(grids_n_mounds)/length(survey_grid60)
# Add the information on prediction to mound dataset
mounds <- mounds %>%
mutate(predicted60 =  case_when(TRAP_Code %in% predicted60$TRAP_Code ~ "yes",
TRAP_Code %nin% predicted60$TRAP_Code ~ "no"
))
# What is the mound_probability in these gridcells?
hist(missing60$mound_probability, main = "Probability of gridcells containing undetected mounds")
# Add the information on prediction to mound dataset
mounds <- mounds %>%
mutate(predicted60 =  case_when(TRAP_Code %in% predicted60$TRAP_Code ~ "yes",
TRAP_Code %nin% predicted60$TRAP_Code ~ "no"
))
# Add the information on prediction to mound dataset
library(tidyverse)
mounds <- mounds %>%
mutate(predicted60 =  case_when(TRAP_Code %in% predicted60$TRAP_Code ~ "yes",
TRAP_Code %nin% predicted60$TRAP_Code ~ "no"
))
# Which ones are not-predicted?
`%nin%` = Negate(`%in%`)
# Add the information on prediction to mound dataset
library(tidyverse)
mounds <- mounds %>%
mutate(predicted60 =  case_when(TRAP_Code %in% predicted60$TRAP_Code ~ "yes",
TRAP_Code %nin% predicted60$TRAP_Code ~ "no"
))
# See the predicted mounds over grids with 60% likelihood of mound plus unpredicted mounds
library(mapview)
mapview(unpredicted60, color = "orange", alpha= 0.5,
map.types = c("Esri.WorldImagery", "CartoDB.Positron"),
layer.name = "Undetected mounds")+
mapview(grids_n_mounds, zcol = "n", at = c(1, 2, 5, 10, 15, 30),
layer.name = "Detected mound no per gridcell")+
mapview(survey_grids60, layer.name = "Gridcells with 60%+ probability")
# See the predicted mounds over grids with 60% likelihood of mound plus unpredicted mounds
library(mapview)
mapview(unpredicted60, color = "orange", alpha= 0.5,
map.types = c("Esri.WorldImagery", "CartoDB.Positron"),
layer.name = "Undetected mounds")+
mapview(grids_n_mounds, zcol = "n", at = c(1, 2, 5, 10, 15, 30),
layer.name = "Detected mound no per gridcell")+
mapview(survey_grid60, layer.name = "Gridcells with 60%+ probability")
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnnall_grid) # 2158, clearly duplicates
# filter the mounds for largesh and noticeable ones (2+ meters)
large <- mounds %>%
filter(Height>=2) # 247 obs
mounds %>%
group_by(predicted60) %>%
summarize(min = min(Height), max = max(Height))
# Check the height difference between un- and predicted mounds
boxplot(Height~predicted60, data = mounds, xlab = "Was this field-confirmed mound detected with CNN?")
# Check height distribution btw un- and predicted mounds
hist(mounds$Height[mounds$predicted60 == "no"], col = "pink", breaks  = 20,main = "Histogram of detected (yellow) and undetected (pink) mounds by height",
xlab = "Mound height (m)");
hist(mounds$Height[mounds$predicted60 == "yes"], col = "yellow", add =TRUE, alpha = 0.5);
# Is there a significant relationship between the Height of a mound and its detection?
t.test(Height ~ as.factor(predicted60), data = mounds)
str(t.test(Height ~ as.factor(predicted60), data = mounds))
# ... the answer seems to be yes with p at 3.14e-05
21/773
15/288
38/773
19/151
View(survey)
# Cumulative facetted visual
ggplot()+
geom_sf(data = grid60, aes(fill = mound_probability)) +
labs(fill = "Probability of mound")+
# add mounds
geom_sf(data = mounds,
aes(size = Height, col = "red",  alpha = 0.6)) +
facet_wrap(~predicted60)+
theme_bw() +
guides(color = FALSE,
size = guide_legend(order = 1),
fill = guide_legend(order = 2),
alpha = FALSE)+
ggtitle("Mounds located in gridcells with 60%+ probability (no=620, yes=146)")
ggplot()+
geom_sf(data = grid60, aes(fill = mound_probability)) +
labs(fill = "Probability of mound")+
# add mounds
geom_sf(data = mounds,
aes(size = Height, col = "red",  alpha = 0.6)) +
facet_wrap(~predicted60)+
theme_bw() +
guides(color = FALSE,
size = guide_legend(order = 1),
fill = guide_legend(order = 2),
alpha = FALSE)+
ggtitle(paste0("Mounds located in gridcells with 60%+
probability (no=",nrow(predicted60),",yes=",nrow(missing60),")"))
ggplot()+
geom_sf(data = grid60, aes(fill = mound_probability)) +
labs(fill = "Probability of mound")+
# add mounds
geom_sf(data = mounds,
aes(size = Height, col = "red",  alpha = 0.6)) +
facet_wrap(~predicted60)+
theme_bw() +
guides(color = FALSE,
size = guide_legend(order = 1),
fill = guide_legend(order = 2),
alpha = FALSE)+
ggtitle(paste0("Mounds located in gridcells with 60%+
probability (no=",nrow(predicted60),",yes=",nrow(unpredicted60),")"))
ggplot()+
geom_sf(data = grid60, aes(fill = mound_probability)) +
labs(fill = "Probability of mound")+
# add mounds
geom_sf(data = mounds,
aes(size = Height, col = "red",  alpha = 0.6)) +
facet_wrap(~predicted60)+
theme_bw() +
guides(color = FALSE,
size = guide_legend(order = 1),
fill = guide_legend(order = 2),
alpha = FALSE)+
ggtitle(paste0("Mounds located in gridcells with 60%+
probability (no=",nrow(unpredicted60),",yes=",nrow(predicted60),")"))
grid60 %>%
# filter(mound_probability>0.5) %>%
ggplot()+
geom_sf(aes(color = mound_probability))+
scale_color_gradient(low = "green",
high = "red",
"Mound probability")+
geom_sf(data = mounds$geometry[mounds$predicted60 == "yes"], size = mounds$Height[mounds$predicted60 == "yes"], col = "lightgrey", alpha = 0.5) +
ggtitle("Predicted mounds in Kazanlak")
# See the mounds not caught by the cells with 60%+ probability
grid60 %>%
# filter(mound_probability>0.5) %>%
ggplot()+
geom_sf(aes(color = mound_probability))+
scale_color_gradient(low = "green",
high = "red",
"Mound probability")+
#geom_sf(data = unpredicted60$geometry)+
geom_sf(data = mounds$geometry[mounds$predicted60 == "no"], size = mounds$Height[mounds$predicted60 == "no"], col = "lightgrey", alpha = 0.5)+
ggtitle("Unpredicted mounds in Kazanlak")
View(kaz)
rm(kaz)
gc()
library(tidyverse)
library(sf)
library(raster)
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted80 <- st_intersection(mounds, grid80)# %>% distinct() # 38 predicted
library(tidyverse)
library(sf)
library(raster)
# Check spatial overlap between 60%+ grid cells and all 773 mounds
predicted80 <- st_intersection(mounds, grid80)# %>% distinct() # 38 predicted
# Which ones are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted80 <- mounds[mounds$TRAP_Code%nin%predicted80$TRAP_Code,] # 735 not predicted
# Inspect
length(unique(predicted80$TRAP_Code)) #  unique mounds
length(grid80$id) #   cells with 80%p in the whole Kazanlak
length(survey_grid80) # cells with 80%p in survey area
# How many gridcells with 80% probability actually contain mounds?
grids_n_mounds8 <- predicted80 %>%
group_by(id) %>%
count()
length(unique(grids_n_mounds8$id)) #   grids within study area catch mounds
hist(grids_n_mounds8$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Number of predicted mounds (n = ",length(unique(predicted80$TRAP_Code)), ") per grid cell ( ",nrow(grids_n_mounds8)," TP) \n among a total of ",length(survey_grid80)," grid cells in the study area with 80% likelihood"))
4/33
5/773
library(tidyverse)
library(sf)
library(raster)
objects_needed <- c("kaz", "cnn_df", "grid60", "mounds", "survey_ch", "survey", "survey_grid60")
script <- c("CNN_LoadData2021.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
objects_needed <- c("kaz", "cnn_df", "grid60", "mounds", "survey_ch", "survey", "survey_grid60")
script <- c("CNN01_LoadData2021.R")
for (i in objects_needed){
if (exists(i)){
print(i)
}  else {
source(script)
#  source(paste0("scripts/",(script[contains(gsub("m","", i), vars = script)])))
}
}
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021.R")
library(tidyverse)
library(sf)
library(raster)
######################### GRID MAKING MANUAL for 60%+ AREAS
# create a df with only 60%+ probability, inverting the provided probability
cnn60_df <- cnn_df %>%
mutate(mound_probability = cnn_df$mound_probability) %>%  # Ross suggests mound_prob field refers to not-mound, so inverting
filter(mound_probability > 0.599)
y <- cnn60_df$y
x <- cnn60_df$x
# define the plot edges based upon the plot radius.
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
# Extract the image ID information
ID <- cnn60_df$"Image filename"
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
side <- 150 # stamps are 150m per side of polygon
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates f
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
ID <- cnn60_df$"Image filename"
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names = ID,
mound_probability = cnn60_df$mound_probability))
polys_df
grid60 <- st_as_sf(polys_df)
# Write to shapefile
# st_write(grid60, "output_data/grid60_150.shp",driver = 'ESRI Shapefile', append=FALSE)
# Clean up interim files
remove(polys,polys_df, square, x,y,xPlus,yPlus,side)
# Look at the polygons
library(mapview)
mapview(grid60)+mapview(cnn60_pt)
# Visualize the grid cells with higher probability
ggplot(grid60) +
geom_sf(aes(color = mound_probability))
##################################### SPATIAL GRIDS OUT OF PREDICTION 80% thresholds
# Filter pre
# Filter predictions to those that have 80+% likelihood of containing a mound
cnn80_pt <- cnn_df %>%
mutate(mound_probability = cnn_df$mound_probability) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability >0.799) %>%  # 78 observations
st_as_sf(coords = c("x","y"), crs = 32635)
############################# GRID MAKING MANUAL 80%
# create a df with only 80%+ probability, inverting the provided probability
cnn80_df <- cnn_df %>%
mutate(mound_probability = cnn_df$mound_probability) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.799)
# Look at the distribution of the 'corrected' predictions
hist(1-cnn_df$mound_probability, main = "Probability of a mound")
# Look at the distribution of the 'corrected' predictions
hist(cnn_df$mound_probability, main = "Probability of a mound")
which(is.na(cnn_df$mound_probability))
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021.R")
gc()
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2021.R")
cnn_df %>%
mutate(mound_probability = cnn_df$mound_probability) %>%
filter(mound_probability >0.799)
cnn_df %>%
mutate(mound_probability = cnn_df$mound_probability) %>%
filter(mound_probability > 0.799)
# Bring in survey area to see overall coverage
survey <- st_read("data/KAZ_surveyarea.shp")
################################    GET MOUND DATA
# Bring in all the mounds
mounds <- st_read("data/KAZ_mounds.shp")
mounddata <- read_csv("data/KAZ_mdata.csv")
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2022.R")
cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.599)
cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.59)
