#slice(which(lengths(st_intersects(cnn_grid60, mounds))>0))
plot(success60)
predictedat60
hist(grids_n_mounds$n, breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(unique(cnn_grid60$`Image filename`))," with 60% likelihood"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among a total of  ",length(unique(cnn_grid60$`Image filename`))," with 60% likelihood"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of predicted mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the predicted ",length(unique(cnn_grid60$`Image filename`))," with 60% likelihood"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mound true positives (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the predicted ",length(unique(cnn_grid60$`Image filename`))," with 60% likelihood"))
32/897*100
(897-32)/897*100
773-67
706/773*100
350-67
283/350*100
350-67
67/350*100
library(mapview)
mapview(unpredicted60, color = "orange", alpha= 0.5,
map.types = c("Esri.WorldImagery", "CartoDB.Positron"),
layer.name = "Undetected mounds")+
mapview(grids_n_mounds, zcol = "n", at = c(1, 2, 5, 10, 15, 30),
layer.name = "Detected mound no per gridcell")+
mapview(survey_grids60, layer.name = "Gridcells with 60%+ probability")
dim(cnn60_sp)[1]
length(survey_grids60)
predictedat60
dim(predictedat60)[1]
success60 <- cnn_grid60 %>%
slice(which(lengths(st_contains(cnn_grid60, mounds))>0))
success60
#slice(which(lengths(st_intersects(cnn_grid60, mounds))>0))
unique(sucesss60)
#slice(which(lengths(st_intersects(cnn_grid60, mounds))>0))
unique(success60)
#slice(which(lengths(st_intersects(cnn_grid60, mounds))>0))
unique(success60$`Image filename`)
#slice(which(lengths(st_intersects(cnn_grid60, mounds))>0))
length(unique(success60$`Image filename`))
cnn_grid60 %>%
slice(which(lengths(st_contains(cnn_grid60, mounds))>0)) %>% distinct()
length(unique(success60$`Image filename`))
unpredicted60
grids_n_mounds
success60
predictedat60 %>%
#  st_drop_geometry() %>%
group_by(Image.filename) %>%
count()
(430-32)/430*100
32/430*100
nrow(grids_n_mounds)/length(unique(cnn_grid60$X1))
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnn_grid60) # 2158, clearly duplicates
missing60
cnn_grid60
cnn60_sp
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- st_make_grid(cnn60_sp, cellsize = 250, what = "polygons")
# Re-add probability data to the 60%+ grid, as the gridmaking stripped the values out
cnn_grid60 <- st_join(st_sf(cnn_grid60), cnn60_sp)
cnn_grid60
# Filter predictions to those that have 60+% likelihood of containing a mound
cnn60_sp <- cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.59) %>% # 897 observations have 60+% proabbility of being mounds (very close to original)
st_as_sf(coords = c("coord_x","coord_y"), crs = 32635)
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- st_make_grid(cnn60_sp, cellsize = 150, what = "polygons")
# Re-add probability data to the 60%+ grid, as the gridmaking stripped the values out
cnn_grid60 <- st_join(st_sf(cnn_grid60), cnn60_sp)
?st_make_grid()
plot(cnn60_sp)
plot(cnn60_sp$geometry)
cnn60_sp
st_length(cnn60_sp)
st_length(cnn60_sp)
st_crs(cnn60_sp)
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- st_make_grid(cnn60_sp, cellsize = c(150,150), what = "polygons")
cnn_grid60
plot(cnn_grid60)
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- st_make_grid(cnn60_sp, cellsize =150, what = "polygons")
plot(cnn_grid60)
cnn_grid60 <- st_make_grid(cnn60_sp, cellsize = 150, what = "polygons")
plot(cnn_grid60)
plot(cnn_grid60);plot(cnn60_sp, add = T, col = "red")
mapview(cnn_grid60)+mapview(cnn60_sp)
cnn60_sp
cnn_df
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- sf::st_make_grid(cnn60_sp, cellsize = 150, what = "polygons", n=1)
plot(cnn_grid60);plot(cnn60_sp, add = T, col = "red")
test <- st_make_grid(cnn60_sp)
plot(test)
plot(test);plot(cnn60_sp, add = T, col = "red")
test <- st_make_grid(cnn60_sp, what = "corners")
plot(test);plot(cnn60_sp, add = T, col = "red")
test <- st_make_grid(cnn60_sp, what = "corners", cellsize = 150)
plot(test);plot(cnn60_sp, add = T, col = "red")
test <- st_make_grid(cnn60_sp, what = "polygons", cellsize = 150)
plot(test);plot(cnn60_sp, add = T, col = "red")
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- sf::st_make_grid(cnn60_sp, cellsize = 250, what = "polygons")
plot(cnn_grid60);plot(cnn60_sp, add = T, col = "red")
mapview(cnn_grid60)+mapview(cnn60_sp)
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- sf::st_make_grid(cnn60_sp, cellsize = 150, what = "polygons")
mapview(cnn_grid60)+mapview(cnn60_sp)
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- sf::st_make_grid(cnn60_sp, cellsize = 22500, what = "polygons")
plot(cnn_grid60);plot(cnn60_sp, add = T, col = "red")
# Make a grid of 60%+ cells, 897 cells, all unique
cnn_grid60 <- sf::st_make_grid(cnn60_sp, cellsize = 150, what = "polygons")
side <- 150 #twice that is 150m per side of polygon
y <- cnn_df$coord_y
x <- cnn_df$coord_x
# define the plot edges based upon the plot radius.
yPlus <- y+side
xPlus <- x+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
# Extract the image ID information
ID <- cnn_df$`Image filename`
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
cnn60_sp
cnn60_sp$geometry[1]
cnn60_sp$geometry
cnn60_df <- cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.59)
y <- cnn60_df$coord_y
x <- cnn60_df$coord_x
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
pred <- 1 - cnn_df$`Raw Prediction`
# Extract the image ID information
ID <- cnn60_df$`Image filename`
pred <- 1 - cnn60_df$`Raw Prediction`
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names=ID, probability = pred))
polys_df
grid60 <- st_as_sf(polys_df)
grid60
polys_df
grid60 <- st_as_sf(polys_df)
grid60
# Write to shapefile
st_write(grid60, "output_data/grid60_150.shp",driver = 'ESRI Shapefile', append=FALSE)
# Remove interim files
remove(polys,polys_df, square)
# Look at the polygons
mapview(grid60)+mapview(cnn60_sp)
# Visualize the grid cells with higher probability
ggplot(grid60) +
geom_sf(aes(color = probability))
cnn_df <- read_csv("2022-03-10_predictions/2021-03-10.Predictions.csv")
# Filter predictions to those that have 60+% likelihood of containing a mound
# and make into points
cnn60_pt <- cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.59) %>% # 897 observations have 60+% proabbility of being mounds (very close to original)
st_as_sf(coords = c("coord_x","coord_y"), crs = 32635)
side <- 150 #twice that is 150m per side of polygon
cnn60_df <- cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.59)
y <- cnn60_df$coord_y
x <- cnn60_df$coord_x
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
# Extract the image ID information
ID <- cnn60_df$`Image filename`
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, probability = cnn60_df$mound_probability))
polys_df
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names = ID,
probability = cnn60_df$mound_probability))
polys_df
grid60 <- st_as_sf(polys_df)
# Remove interim files
remove(polys,polys_df, square)
# Look at the polygons
mapview(grid60)+mapview(cnn60_sp)
# Look at the polygons
mapview(grid60)+mapview(cnn60_pt)
cnn80_sp <- cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability >0.799) %>%  # 78 observations
st_as_sf(coords = c("coord_x","coord_y"), crs = 32635)
# Make a grid of 80%+ cells, 78 cells
cnn_grid80 <- st_make_grid(cnn80_sp, cellsize = 250, what = "polygons")
#plot(cnn_grid80)
cnn_grid80 <- st_make_grid(cnn80_sp, cellsize = 250, what = "polygons")
#plot(cnn_grid80)
# Add probability data to the 80%+ grid
cnn_grid80 <- st_join(st_sf(cnn_grid80), cnn80_sp)
# Look at the polygons
mapview(cnn_grid80)+mapview(cnn80_sp)
side <- 150 #twice that is 150m per side of polygon
cnn80_df <- cnn_df %>%
mutate(mound_probability = 1 - cnn_df$`Raw Prediction`) %>%  # in 2022, prob refers to not-mound, so inverting
filter(mound_probability > 0.799)
y <- cnn80_df$coord_y
x <- cnn80_df$coord_x
# define the plot edges based upon the plot radius.
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
# Extract the image ID information
ID <- cnn80_df$`Image filename`
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names = ID,
probability = cnn80_df$mound_probability))
polys_df
grid80 <- st_as_sf(polys_df)
# Write to shapefile
# st_write(grid60, "output_data/grid60_150.shp",driver = 'ESRI Shapefile', append=FALSE)
# Remove interim files
remove(polys,polys_df, square)
# Look at the polygons
mapview(grid80)+mapview(cnn80_sp)
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2022.R")
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2022.R")
plot(grid80["mound_probability"])
source("~/Documents/RStudio/CNN_ross/CNN01_LoadData2022.R")
plot(grid80["mound_probability"])
plot(grid60["mound_probability"])
plot(grid80["mound_probability"])
plotRGB(kaz, stretch= "lin");
plot(survey_ch, border = "green", lwd = 2, add = TRUE);
#plot(survey_sm, border = "red", lwd = 2, add = TRUE);
#plot(survey$geometry, col = "lightyellow",border = "lightyellow", add = TRUE );
plot(mounds$geometry, add = TRUE, col = "hotpink");
plot(grid80$geometry, add = TRUE, col = "white");
plot(grid60$geometry, add = TRUE, border = "white");
legend("bottom", legend = "Grid cells with 60% (white border) and 80% (white fill) probability of mounds overlayed on \nthe satellite image and survey study area outlines with mounds (pink circles)")
# 67 out of 773 mounds are found in 60%+ grid cells
predictedat60 <- st_intersection(mounds, grid60)
# Check in which gridcells the predicted mounds are located
success60 <- grid60 %>%
slice(which(lengths(st_contains(grid60, mounds))>0)) # %>% distinct()
#slice(which(lengths(st_intersects(grid60, mounds))>0))
length(unique(success60$`Image filename`))
plot(success60)
# Which mounds are not-predicted?
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predictedat60$TRAP_Code,] # 706 not predicted
predictedat60
# Check in which gridcells the predicted mounds are located
success60 <- grid60 %>%
slice(which(lengths(st_contains(grid60, mounds))>0)) # %>% distinct()
#slice(which(lengths(st_intersects(grid60, mounds))>0))
length(unique(success60$`Image filename`))
success60
#slice(which(lengths(st_intersects(grid60, mounds))>0))
length(unique(success60$id))
plot(success60)
`%nin%` = Negate(`%in%`)
unpredicted60 <- mounds[mounds$TRAP_Code%nin%predictedat60$TRAP_Code,] # 706 not predicted
dim(predictedat60)[1]
dim(predictedat60)[1]/773*100
dim(predictedat60)[1]/350*100
length(unique(predictedat60$TRAP_Code)) # 67 unique mounds
# Summary of how many mounds the TP gridcells with 60% probability actually contain?
grids_n_mounds <- predictedat60 %>%
#  st_drop_geometry() %>%
group_by(id) %>%
count()
grids_n_mounds
length(unique(grids_n_mounds$id)) # 32 unique grids within study area catch the 67 mounds; however, we had 38 successful grids when we ran st_contains() above so there may be a bit of duplication above
success60
#slice(which(lengths(st_intersects(grid60, mounds))>0))
length(unique(success60$id))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mound true positives (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the predicted ",length(unique(grid60$`Image filename`))," with 60% likelihood"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mound true positives (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the predicted ",length(unique(grid60$id))," with 60% likelihood"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mound true positives (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the predicted ",length(unique(survey_grid60$id))," with 60% likelihood"))
grid60
survey_grid60
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mound true positives (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the predicted ",length(survey_grid60)," with 60% likelihood"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mound true positives (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the ",length(survey_grid60)," grids with 60% likelihood within survey area"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mound true positives (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells among the ",length(survey_grid60)," grids with 60% likelihood \n within survey area"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") \n across ",nrow(grids_n_mounds)," TP grid cells of the ",length(survey_grid60)," grids with 60+% prob of mound within survey area"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") across \n",nrow(grids_n_mounds)," TP grid cells of the ",length(survey_grid60)," grids with 60+% prob of mound within survey area"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") across \n",nrow(grids_n_mounds)," of the ",length(survey_grid60)," grid cells with 60+% prob of mound within survey area"))
hist(grids_n_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") across ",nrow(grids_n_mounds)," of the ",length(survey_grid60),"  \n grid cells with 60+% prob of mound within survey area"))
16/290*100
(290-16)/290*100
350-22
328/350*100
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
cnnall_sp <- st_as_sf(cnn_df, coords = c("coord_x","coord_y"), crs = 32635)
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = 150, what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes
28350*28350
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = 250, what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(150,150), what = "polygons")
cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(150,150), what = "polygons")
mapview(cnnall_grid)
mapview(cnnall_grid)+mapview(cnnall_sp)
# Find missing mound information regarding prediction in the overall grid cnn_all
# Need to eliminate overlap in gridcells!
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnnall_grid) # 2158, clearly duplicates
missing60
unpredicted60
missing60 <- cnnall_grid %>%
slice(which(lengths(st_contains(cnnall_grid, unpredicted60))>0))
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(149,149), what = "polygons")
# Create a grid of ALL the predictions to see where mounds are in relation to it (overlap!)
# cnnall_sp <- st_as_sf(cnn_df, coords = c("coord_x","coord_y"), crs = 32635)
# cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(149,149), what = "polygons")
# cnnall_grid <- st_join(st_sf(cnnall_grid), cnnall_sp) # add attributes does not work as four points are at edges
mapview(cnnall_grid)+mapview(cnnall_sp)
cnnall_grid <- st_make_grid(cnnall_sp, cellsize = c(150,150), what = "polygons")
side <- 150
y <- cnn_df$coord_y
x <- cnn_df$coord_x
# define the plot edges based upon the plot radius.
yPlus <- y+side
xPlus <- x+side
# calculate polygon coordinates for each plot centroid.
square <- cbind(x,yPlus,  # NW corner
xPlus, yPlus,  # NE corner
xPlus,y,  # SE corner
x,y, # SW corner
x,yPlus)  # NW corner again - close polygon
# Extract the image ID information
ID <- cnn_df$`Image filename`
# create spatial polygons (squares) from mound coordinates with mapply
polys <- SpatialPolygons(mapply(function(poly, id)
{
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
},
split(square, row(square)), ID),
proj4string=CRS(as.character("+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0")))
plot(polys)
# Convert to sf feature via a SpatialDataframe (to preserve mound IDs)
polys_df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names = ID,
mound_probability = 1 - cnn_df$`Raw Prediction`))
polys_df
cnnall_grid <- st_as_sf(polys_df)
# Write to shapefile
st_write(cnnall_grid, "output_data/cnngrid_150.shp",driver = 'ESRI Shapefile', append=FALSE)
# Remove interim files
remove(polys,polys_df, square, x,y,xPlus,yPlus,side)
cnnall_grid
# Find missing mound information regarding prediction in the overall grid cnn_all
# eliminating id duplicates is nonsensical as the two datasets have same ids, I  must aggregate spatially, e.g. st_union or st_difference, or relabel the datasets before merging, or crop to a shared non-overlapping border.
missing60 <- st_intersection(unpredicted60, cnnall_grid) # 2158, clearly duplicates
missing60
fpgrid <- cnnall_grid %>%
slice(which(lengths(st_contains(cnnall_grid, unpredicted60))>0))
fpgrid
missing60
missing60 %>%
group_by(id) %>%
count()
# Summarize how many mounds each TP gridcell contains
grids_FN_mounds <- missing60 %>%
group_by(id) %>%
count()
hist(grids_N_mounds$n,
#breaks = 40,
xlab = "Mound count in grid",
ylab = "Grid count",
main = paste0("Distribution of mounds (n = ",length(unique(predictedat60$TRAP_Code)), ") across ",nrow(grids_n_mounds)," of the ",length(survey_grid60),"  \n grid cells with 60+% probability of mound within survey area"))
length(unique(grids_FN_mounds$id)) # 16 unique grids within study area catch the 22 mounds; consistent with success60 above
length(unique(grids_FN_mounds$id)) # 16 unique grids within study area catch the 22 mounds; consistent with success60 above
survey_grid <- st_intersection(survey_ch, cnnall_grid)
survey_grid
plot(survey)
plot(survey_grid)
FN <- cnnall_grid %>%   # 383 grids are False Negatives
slice(which(lengths(st_contains(cnnall_grid, unpredicted60))>0))
FN
hist(FN$mound_probability)
hist(grids_FN_mounds$n,
#breaks = 40,
xlab = "Mound count in FN grid",
ylab = "Grid count",
main = paste0("Distribution of mounds (n = ",length(unique(missing60$TRAP_Code)), ") across ",nrow(grids_FN_mounds)," of the ",length(survey_grid),"  \n grid cells within survey area"))
# Check for duplicates
#?distinct()
length(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
# Check for duplicates
#?distinct()
length(duplicated(missing60$TRAP_Code)) # 2158 points to duplication
duplicated(missing60$TRAP_Code)
hist(grids_FN_mounds$n,
#breaks = 40,
xlab = "Mound count per FN gridcell",
ylab = "Grid count",
main = paste0("False negatives: distribution of mounds (n = ",length(unique(missing60$TRAP_Code)), ") across ",nrow(grids_FN_mounds)," of the ",length(survey_grid),"  \n grid cells within survey area"))
# What is the mound_probability in these gridcells?
hist(missing60$mound_probability, main = "Probability of gridcells containing undetected mounds")
gc()
